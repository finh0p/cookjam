# Generated by Django 5.0.4 on 2024-04-22 18:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AcidCompositionInformations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tryptophan', models.FloatField()),
                ('threonine', models.FloatField()),
                ('isoleucine', models.FloatField()),
                ('leucine', models.FloatField()),
                ('lysine', models.FloatField()),
                ('methionine', models.FloatField()),
                ('cysteine', models.FloatField()),
                ('phenylalanine', models.FloatField()),
                ('tyrosine', models.FloatField()),
                ('valin', models.FloatField()),
                ('arginine', models.FloatField()),
                ('histidine', models.FloatField()),
                ('alanin', models.FloatField()),
                ('aspartic_acid', models.FloatField()),
                ('glutamic_acid', models.FloatField()),
                ('glycine', models.FloatField()),
                ('proline', models.FloatField()),
                ('serin', models.FloatField()),
                ('omega3', models.FloatField()),
            ],
            options={
                'verbose_name': 'Информация о содержании аминокислот в продукте',
                'verbose_name_plural': 'Информация о содержании аминокислот в продуктах',
            },
        ),
        migrations.CreateModel(
            name='DiabetesInformations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('glycemic_index', models.IntegerField()),
                ('insulin_index', models.IntegerField()),
            ],
            options={
                'verbose_name': 'Информация для диабетиков о продукте',
                'verbose_name_plural': 'Информация для диабетиков о продуктах',
            },
        ),
        migrations.CreateModel(
            name='MicroelementsInformations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ca', models.FloatField()),
                ('fe', models.FloatField()),
                ('i', models.FloatField()),
                ('mg', models.FloatField()),
                ('p', models.FloatField()),
                ('k', models.FloatField()),
                ('na', models.FloatField()),
                ('zn', models.FloatField()),
                ('cu', models.FloatField()),
                ('mn', models.FloatField()),
                ('se', models.FloatField()),
                ('f', models.FloatField()),
                ('cr', models.FloatField()),
                ('si', models.FloatField()),
                ('cl', models.FloatField()),
                ('mo', models.FloatField()),
                ('s', models.FloatField()),
            ],
            options={
                'verbose_name': 'Информация о содержании микроэлементов в продукте',
                'verbose_name_plural': 'Информация о содержании микроэлементов в продуктах',
            },
        ),
        migrations.CreateModel(
            name='ProductsMainInformation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('proteins', models.FloatField()),
                ('fats', models.FloatField()),
                ('carbohydrates', models.FloatField()),
                ('kcal', models.FloatField()),
                ('water', models.FloatField()),
                ('fiber', models.FloatField()),
                ('starch', models.FloatField()),
                ('cholesterol', models.FloatField()),
                ('trans_fats', models.FloatField()),
            ],
            options={
                'verbose_name': 'Основная информация о продукте',
                'verbose_name_plural': 'Основная информация о продуктах',
            },
        ),
        migrations.CreateModel(
            name='VitaminsInformations',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vitamin_a', models.FloatField()),
                ('alpha_carotene', models.FloatField()),
                ('beta_carotene', models.FloatField()),
                ('vitamin_d', models.FloatField()),
                ('vitamin_e', models.FloatField()),
                ('vitamin_k', models.FloatField()),
                ('vitamin_c', models.FloatField()),
                ('vitamin_b1', models.FloatField()),
                ('vitamin_b2', models.FloatField()),
                ('vitamin_b3', models.FloatField()),
                ('vitamin_b4', models.FloatField()),
                ('vitamin_b5', models.FloatField()),
                ('vitamin_b6', models.FloatField()),
                ('vitamin_b7', models.FloatField()),
                ('vitamin_b8', models.FloatField()),
                ('vitamin_b9', models.FloatField()),
                ('vitamin_b11', models.FloatField()),
                ('vitamin_b12', models.FloatField()),
                ('vitamin_b13', models.FloatField()),
                ('coenzyme_q10', models.FloatField()),
                ('vitamin_n', models.FloatField()),
                ('vitamin_u', models.FloatField()),
            ],
            options={
                'verbose_name': 'Информация о содержании витаминов в продукте',
                'verbose_name_plural': 'Информация о содержании витаминов в продуктах',
            },
        ),
        migrations.CreateModel(
            name='ProductsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'Категория продуктов',
                'verbose_name_plural': 'Категории продуктов',
                'indexes': [models.Index(fields=['name'], name='products_pr_name_97c58f_idx')],
                'unique_together': {('name',)},
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255)),
                ('acid_composition', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.acidcompositioninformations')),
                ('diabetes_information', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.diabetesinformations')),
                ('microelements_information', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.microelementsinformations')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, related_name='products_in_the_category', to='products.productscategory')),
                ('main_information', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.productsmaininformation')),
                ('vitamins_information', models.ForeignKey(on_delete=django.db.models.deletion.RESTRICT, to='products.vitaminsinformations')),
            ],
            options={
                'verbose_name': 'Продукт',
                'verbose_name_plural': 'Продукты',
                'indexes': [models.Index(fields=['name'], name='products_pr_name_9ff0a3_idx')],
                'unique_together': {('name',)},
            },
        ),
    ]
